{"version":3,"sources":["QuickPractice.js","App.js","reportWebVitals.js","index.js"],"names":["QuickPractice","props","handleChoiceSelection","selected","choice","setState","checkAnswer","state","bChoice","cChoice","questions","questionNumber","questionState","currentQuestion","bAnswer","cAnswer","length","resetQuestions","renderTriangle","sideA","className","width","height","points","style","fill","stroke","fontSize","fontFamily","x","y","renderAnswerResponse","a","b","c","mathString","explanation","displayMode","renderAnswerSelection","bChoices","map","k","checked","onChange","type","value","cChoices","onClick","this","Component","QUESTIONS","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecf208ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Latex from 'react-latex';\nimport './QuickPractice.css';\n\nconst UNANSWERED = 0;\nconst INCORRECT = 1;\nconst CORRECT = 2;\nconst FINISHED = 3;\n\nclass QuickPractice extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: this.props.questions,\n            questionNumber: 1,\n            questionState: UNANSWERED,\n            bChoice: null,\n            cChoice: null,\n        }\n    }\n\n    handleChoiceSelection = (selected, choice) => {\n        this.setState({ [choice]: selected });\n    }\n\n    checkAnswer = () => {\n        this.setState((state) => {\n            const { bChoice, cChoice, questions, questionNumber, questionState } = state;\n\n            if (questionState === CORRECT) {\n                return {\n                    questionState: UNANSWERED,\n                    questionNumber: questionNumber + 1,\n                    bChoice: null,\n                    cChoice: null,\n                };\n            }\n\n            const currentQuestion = questions[questionNumber-1];\n            const newQuestionState = bChoice === currentQuestion.bAnswer && cChoice === currentQuestion.cAnswer\n                ? (questionNumber === questions.length)\n                    ? FINISHED\n                    : CORRECT\n                : INCORRECT;\n            return { questionState: newQuestionState };\n        });\n    }\n\n    resetQuestions = () => {\n        this.setState({\n            questionState: UNANSWERED,\n            questionNumber: 1,\n            bChoice: null,\n            cChoice: null,\n        });\n    }\n    /**\n     * Functions for rendering different parts of the widget\n     */\n    renderTriangle = (sideA) => {\n        return <div className='triangle-image'>\n            <svg width=\"200\" height=\"200\">\n              <polygon\n                  points=\"30,30 30,140 170,140\"\n                  style={{ fill: '#e75480', stroke: 'black', 'strokeWidth': 3}}\n              />\n              <polygon\n                  points=\"30,140 30,120 50,120 50,140\"\n                  style={{ fill: '#e75480', stroke: 'black', 'strokeWidth': 3}}\n              />\n              <text fill=\"black\" fontSize=\"20\" fontFamily=\"Verdana\" x=\"0\" y=\"95\">\n                  {sideA}\n              </text>\n              <text fill=\"black\" fontSize=\"20\" fontFamily=\"Verdana\" x=\"90\" y=\"165\">\n                  b\n              </text>\n              <text fill=\"black\" fontSize=\"20\" fontFamily=\"Verdana\" x=\"110\" y=\"80\">\n                  c\n              </text>\n            </svg>\n        </div>\n    }\n\n    renderAnswerResponse = () => {\n        const { questions, questionNumber, questionState } = this.state;\n        const currentQuestion = questions[questionNumber - 1];\n        const [a, b, c] = [currentQuestion.a, currentQuestion.bAnswer, currentQuestion.cAnswer];\n\n        const mathString = `\n        $$a^2 + b^2 = c^2$$\n        $$${a}^2 + ${b}^2 = ${c}^2$$\n        $$${a*a} + ${b*b} = ${c*c}$$\n        $$${a*a + b*b} = ${c*c}$$\n        `;\n        const explanation = <>\n            Correct! Using Pythagorean's Theorem, we can see that:\n            <Latex displayMode={true}>{mathString}</Latex>\n        </>;\n\n        switch (questionState) {\n            case UNANSWERED:\n                return <></>;\n            case INCORRECT:\n                return <p className='answer-response'>Not quite üôà Try again!</p>;\n            case CORRECT:\n                return <p className='answer-response'>\n                    {explanation}\n                </p>;\n            case FINISHED:\n                return <p className='answer-response'>\n                    {explanation}\n                    <br/>\n                    Nice work! You completed all the questions! üëèüèøüëèüèΩüëèüèª\n                </p>;\n            default:\n                break;\n        }\n    }\n\n    renderAnswerSelection = () => {\n        const { bChoice, cChoice, questionState} = this.state;\n        const currentQuestion = this.state.questions[this.state.questionNumber - 1];\n\n        return <>\n            <p className='question'>What values of b and c will create a valid right triangle?</p>\n            <form className='answer-form'>\n                <div className='answer-selection'>\n                    <label className='answer-label'>The value of b is:</label>\n                    { currentQuestion.bChoices.map((choice, k) => (\n                        <label className='radio-label' key={k}>\n                            <input\n                                checked={choice === bChoice}\n                                onChange={() => this.handleChoiceSelection(choice, \"bChoice\")}\n                                type='radio'\n                                value={choice}\n                            />\n                            {choice}\n                        </label>\n                    ))}\n                </div>\n                <div className='answer-selection'>\n                    <label className='answer-label'>The value of c is:</label>\n                    { currentQuestion.cChoices.map((choice, k) => (\n                        <label className='radio-label' key={k}>\n                            <input\n                                checked={choice === cChoice}\n                                onChange={() => this.handleChoiceSelection(choice, \"cChoice\")}\n                                type='radio'\n                                value={choice}\n                            />\n                            {choice}\n                        </label>\n                    ))}\n                </div>\n\n                {this.renderAnswerResponse()}\n\n                <input\n                    className='answer-button'\n                    onClick={questionState === FINISHED ? this.resetQuestions : this.checkAnswer}\n                    type='button'\n                    value={\n                        questionState === CORRECT\n                            ? 'Next Question!'\n                            : (questionState === FINISHED)\n                                ? 'Restart!'\n                                :'Check!'\n                    }\n                />\n            </form>\n        </>;\n    }\n\n    render() {\n        const { questions, questionNumber } = this.state;\n        const currentQuestion = questions[questionNumber - 1];\n\n        return <div className='quick-practice'>\n            <h1 className='widget-title'>Quick Practice {questionNumber}/{questions.length}</h1>\n            {this.renderTriangle(currentQuestion.a)}\n            {this.renderAnswerSelection()}\n        </div>\n    }\n}\nexport default QuickPractice;\n","import './App.css';\nimport QuickPractice from \"./QuickPractice\";\n\nconst QUESTIONS = [\n    {\n        a: 3,\n        bChoices: [2, 3, 4, 5],\n        cChoices: [2, 3, 4, 5],\n        bAnswer: 4,\n        cAnswer: 5,\n    },\n    {\n        a: 4,\n        bChoices: [3, 4, 5, 6],\n        cChoices: [5, 6, 7 ,8],\n        bAnswer: 3,\n        cAnswer: 5,\n    },\n    {\n        a: 12,\n        bChoices: [3, 4, 5, 6],\n        cChoices: [12, 13, 14, 15],\n        bAnswer: 5,\n        cAnswer: 13,\n    },\n    {\n        a: 9,\n        bChoices: [6, 9, 12, 16],\n        cChoices: [14, 15, 16, 17],\n        bAnswer: 12,\n        cAnswer: 15,\n    },\n    {\n        a: 7,\n        bChoices: [18, 20, 22, 24],\n        cChoices: [24, 25, 26, 27],\n        bAnswer: 24,\n        cAnswer: 25,\n    }\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <QuickPractice questions={QUESTIONS} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}